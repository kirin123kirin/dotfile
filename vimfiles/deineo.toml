
[[plugins]]
repo = 'tweekmonster/deoplete-clang2'
on_ft = ['c', 'cpp']
hook_source = '''
  autocmd FileType c,cpp let b:clang2_orig_maps = {}
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'zchee/deoplete-go'
on_i = 1
on_ft = 'go'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
#depends = 'context_filetype.vim'
if = "has('nvim')"
#on_event = 'InsertEnter'
hook_source = '''
	"let g:deoplete#enable_at_startup = 1
	" <TAB>: completion.
	inoremap <silent><expr> <TAB>
	      \ pumvisible() ? "\<C-n>" :
	      \ <SID>check_back_space() ? "\<TAB>" :
	      \ deoplete#manual_complete()
	function! s:check_back_space() abort "{{{
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~ '\s'
	endfunction"}}}

	" <S-TAB>: completion back.
	inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

	inoremap <expr><C-g> deoplete#undo_completion()
	" <C-l>: redraw candidates
	inoremap <expr><C-l>       deoplete#refresh()

	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function() abort
	  return deoplete#cancel_popup() . "\<CR>"
	endfunction

	inoremap <expr> '  pumvisible() ? deoplete#close_popup() : "'"

	" call deoplete#custom#set('_', 'matchers', ['matcher_head'])
	call deoplete#custom#set('ghc', 'sorters', ['sorter_word'])

	" Use auto delimiter
	call deoplete#custom#set('_', 'converters', [
	      \ 'converter_remove_paren',
	      \ 'converter_remove_overlap',
	      \ 'converter_truncate_abbr',
	      \ 'converter_truncate_menu',
	      \ 'converter_auto_delimiter',
	      \ ])

	call deoplete#custom#set('clang', 'input_pattern', '\.\w*|\.->\w*|\w+::\w*')
	call deoplete#custom#set('clang', 'max_pattern_length', -1)
	let g:deoplete#keyword_patterns = {}
	let g:deoplete#keyword_patterns._ = '[a-zA-Z_]\k*\(?'
	let g:deoplete#keyword_patterns.tex = '[^\w|\s][a-zA-Z_]\w*'
	let g:deoplete#omni#input_patterns = {}
	let g:deoplete#omni#input_patterns.python = ''
	let g:deoplete#omni#functions = {}
	let g:deoplete#enable_camel_case = 1
	let g:deoplete#skip_chars = ['(', ')']

'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> N :<C-u>call deol#new({'command': 'zsh'})<CR>
  nnoremap <silent> [Space]s :<C-u>Deol zsh<CR>
  nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
  let g:deol#prompt_pattern = '% \|%$'
  set shell=zsh

  " Set to $PATH.
  let s:bin = dein#get('vim-themis').rtp . '/bin'

  function! s:split_envpath(path) abort "{{{
    let delimiter = has('win32') ? ';' : ':'
    if stridx(a:path, '\' . delimiter) < 0
      return split(a:path, delimiter)
    endif
    let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
    return map(split,'substitute(v:val, ''\\\([\\'
          \ . delimiter . ']\)'', "\\1", "g")')
  endfunction"}}}

  function! s:join_envpath(list, orig_path, add_path) abort "{{{
    let delimiter = has('win32') ? ';' : ':'
    return (stridx(a:orig_path, '\' . delimiter) < 0
          \ && stridx(a:add_path, delimiter) < 0) ?
          \   join(a:list, delimiter) :
          \   join(map(copy(a:list),
          \        "substitute(v:path, ',\\|\\\\,\\@=', '\\\\\\0', 'g')"),
          \        delimiter)
  endfunction"}}}

  let $PATH = s:join_envpath(
        \ dein#util#_uniq(insert(
        \    s:split_envpath($PATH), s:bin)), $PATH, s:bin)
  let $THEMIS_HOME = dein#get('vim-themis').rtp

  unlet s:bin

  autocmd FileType deol call s:on_deol()
  function! s:on_deol() abort
    nnoremap <buffer><silent> [Space]gc :<C-u>call deol#send('git commit')<CR>
    nnoremap <buffer><silent> [Space]gA :<C-u>call deol#send('git commit --amend')<CR>
  endfunction
'''

