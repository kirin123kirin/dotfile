blockdiag {     // フローチャート   <http://blockdiag.com/ja/blockdiag/index.html>
//seqdiag {     // シーケンス図     <http://blockdiag.com/ja/seqdiag/index.html>
//actdiag {     // アクティビティ図 <http://blockdiag.com/ja/actdiag/index.html>
//nwdiag {      // ネットワーク図   <http://blockdiag.com/ja/nwdiag/index.html>
//rackdiag {    // ラック図         <http://blockdiag.com/ja/rackdiag/index.html>
//packetdiag {  // パケット図       <http://blockdiag.com/ja/packetdiag/index.html>
//
// author: 
// version:
//
// 
//
// #############全般的な設定#####################
// blockdiag_fontpath = str or list of str       // TrueType フォントファイルへのパスを指定します。blockdiag_fontpath オプションにはファイル名(文字列)もしくはファイル名の配列を指定することができます。
// blockdiag_fontmap = str                       // フォント定義ファイルへのパスを指定します。
// blockdiag_antialias = bool                    // 図の描画の際にアンチエイリアスを行うかを指定します。
// blockdiag_transparency = bool                 // Render diagrams as transparency or not.
// blockdiag_html_image_format = "PNG" or "SVG"  // HTML 文書生成の際の画像出力フォーマットを指定します。
// blockdiag_latex_image_format = "PNG" or "PDF" // LaTeX 経由で PDF 文書を生成する際の画像出力フォーマットを指定します。”PDF” フォーマットで画像を出力するとベクター形式の画像を得ることができます。なお、その場合は reportlab のインストールが必要です。
// blockdiag_tex_image_format = "PNG" or "PDF"   // “blockdiag_latex_image_format” オプションと等価です。
// blockdiag_debug = bool                        // デバッグモードを有効にします。
//
// #############全般設定２属性設定のサンプル#####
// node_width = Integer                          // ノードの幅を指定します。省略時は128です。
// node_height = Integer                         // ノードの高さを指定します。省略時は40です。
// span_width = Integer                          // ノード間の横幅を指定します。省略時は64です。
// span_height = Integer                         // ノード間の縦幅を指定します。省略時は40です。
// default_fontsize = Integer                    // ノードのラベル属性に使用するフォントサイズを指定します。省略時は11です。
// default_shape = Shape                         // ノードの形状のデフォルトを指定します。省略時はboxです。
// orientation = portrait                        // 縦書きモードにします。省略時は横書きモードです。
// default_node_color = #RRGGBB or colorname     // ノードのデフォルトの色を指定します。省略時は白です。
// default_group_color = #RRGGBB or colorname    // グループのデフォルトの色を指定します。省略時はオレンジです。
// default_linecolor = #RRGGBB or colorname      // ノードの枠とエッジのデフォルトの色を指定します。省略時は黒です。
// default_textcolor = #RRGGBB or colorname      // ノードラベル、エッジラベル、グループラベルのデフォルトの色を指定します。省略時は黒です。
// edge_layout = normal or flowchart             // Experimental エッジレイアウトルールを指定します。
//
// #############ノード別の設定サンプル###########
// ノードID [ 属性名 = 設定値 , 属性名 = 設定値 , ...];
//
// label = String                                // ノードに表示するラベルを定義します。省略された場合は ノードID が利用されます。
// style = dotted                                // 点線で囲います。
// style = dashed                                // 破線で囲います。
// style = Number, Number                        // 線の長さ、空白の長さをカンマ区切りで交互に指定します。
// color = #RRGGBB or colorname                  // ノードの背景色を指定します。 none を指定すると透明になります。指定がない場合は白です。
// numbered = Integer                            // ノードの番号を指定します。 設定されたノードの番号は、Sphinx 拡張で desctable オプションを利用している場合に、生成される表の No. 列に利用されます。
// shape = box                                   // ノードの形状を指定します。省略時は box です。詳細は ノード形状の変更 を参照してください。形状はレンダラプラグインによって拡張することが可能です。
// shape = square                                // 四角
// shape = roundedbox                            // 角が丸い四角
// shape = circle                                // 新円
// shape = elipse                                // 楕円
// shape = diamond                               // 菱形
// shape = note                                  // ノート
// shape = mail                                  // メールマーク
// shape = cloud                                 // 雲型
// shape = dots                                  // 点々点
// shape = minidiamond                           // 判断ボックス的な
// shape = actor                                 // 人形
// shape = beginpoint                            // 処理開始を表すやつ
// shape = endpoint                              // 処理終了を表すやつ
// shape = flowchart.condition                   // 条件分岐
// shape = flowchart.database                    // ドラム缶
// shape = flowchart.terminator                  // UMLで言うターミネータ 四角
// shape = flowchart.input                       // 平行四辺形
// shape = flowchart.loopin                      // 台形
// shape = flowchart.loopout                     // 逆台形
// background = background image                 // ノードに背景画像を張り付けます。ファイルパス、または URL で指定できます。
// stacked                                       // ノードを重ね合わせた状態にします。
// description = description                     // Sphinx 拡張で desctable オプションを利用している場合、図の下にテーブルを表示します。    表示される列は name と description です。 name には ノードID または label 属性が利用されます。
// icon = Image file                             // ノードにアイコンを設定します。ファイルパス、または URL で指定できます。
// textcolor = #RRGGBB or colorname              // ノードのラベルの色を指定します。省略時は黒です。
// width = Integer                               // ノードの幅を指定します。省略時は128です。
// height = Integer                              // ノードの高さを指定します。省略時は40です。
// fontsize = Integer                            // ノードのラベル属性のフォントサイズを指定します。省略時は11です。
// rotate = Integer                              // ラベルの回転角を指定します。0, 90, 180, 270 のいずれかの値を設定できます。省略時は0です。
//
// #############矢印の設定#######################
// ノードA -> ノードB -> ... [ 属性名 = 設定値 , 属性名 = 設定値 , ... ];
// label = String                                // 短い文をエッジに表示します。
// style = dotted                                // 点線で繋ぎます。
// style = dashed                                // 破線で繋ぎます。
// style = none                                  // エッジを消します。
// style = Number, Number                        // 線の長さ、空白の長さをカンマ区切りで交互に指定します。
// hstyle = generalization                       // 汎化
// hstyle = composition                          // コンポジション
// hstyle = aggregation                          // 集約
// color = #RRGGBB or colorname                  // エッジの色を指定します。省略時は黒です。 none を指定すると透明の矢印を書きます。
// dir = none                                    // 矢印を書かずにノードを繋ぎます。  A -- B と等価です。
// dir = forward                                 // 矢印を左のノードから右のノード、または上のノードから下のノードに向かって書きます。  A -> B と等価です。
// dir = back                                    // 矢印を右のノードから左のノード、または下のノードから上のノードに向かって書きます。  A <- B と等価です。
// dir = both                                    // 矢印を両方に書きます。 A <-> B と等価です。
// folded                                        // エッジを折り返します。
// textcolor = #RRRGGBB or colorname             // エッジのラベルの色を指定します。省略時は黒です。
// thick                                         // エッジを太くします。
// fontsize = Integer                            // エッジのラベルのフォントサイズを指定します。省略時は11です。
//
// #############その他設定#######################
// orientation = portrait                        // 一部だけの場合はgroup{}の中に書いてもOK
// #############ソースサンプル###############
// #####ex1#######
//blockdiag {
//   A -> B -> C;
//        B -> D;
//}
//
// #####ex2#######
//seqdiag {
//   A -> B -> C;
//        B -> D;
//}
//
// #####ex3#######
//actdiag {
//   A -> B -> C -> D;
//
//  lane foo {
//    A; B;
//  }
//  lane bar {
//    C; D;
//  }
//}
//
// #####ex4#######
//nwdiag {
//  network dmz {
//      address = "210.x.x.x/24"
//
//      web01 [address = "210.x.x.1"];
//      web02 [address = "210.x.x.2"];
//  }
//  network internal {
//      address = "172.x.x.x/24";
//
//      web01 [address = "172.x.x.1"];
//      db01;
//      app01;
//  }
//}
//
// #####ex5#######
//rackdiag {
//  // ラックの高さ
//  16U;
//
//  // 構成名
//  1: UPS [2U];
//  3: DB Server
//  4: Web Server
//  5: Web Server
//  6: Web Server
//  7: Load Balancer
//  8: L3 Switch
//}
//
// #####ex6#######
//packetdiag {
//  colwidth = 32
//  node_height = 72
//
//  0-15: Source Port
//  16-31: Destination Port
//  32-63: Sequence Number
//  64-95: Acknowledgment Number
//  96-99: Data Offset
//  100-105: Reserved
//  106: URG [rotate = 270]
//  107: ACK [rotate = 270]
//  108: PSH [rotate = 270]
//  109: RST [rotate = 270]
//  110: SYN [rotate = 270]
//  111: FIN [rotate = 270]
//  112-127: Window
//  128-143: Checksum
//  144-159: Urgent Pointer
//  160-191: (Options and Padding)
//  192-223: data [colheight = 3]
//}
//
// ###################################################

}
