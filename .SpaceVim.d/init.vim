" Here are some basic customizations, please refer to the ~/.SpaceVim.d/init.vim
" file for all possible options:
let g:spacevim_default_indent = 4
let g:spacevim_max_column     = 120

set helplang=ja,en
" let g:spacevim_vim_help_language = 'ja_JP.UTF8'
" let g:spacevim_language = 'ja_JP.UTF-8'
" Change the default directory where all miscellaneous persistent files go.
" By default it is ~/.cache/vimfiles/.
let g:spacevim_plugin_bundle_dir = '~/.cache/vimfiles/'

" set SpaceVim colorscheme
let g:spacevim_colorscheme = 'PaperColor'
let g:spacevim_colorscheme_bg = 'light'

" Set plugin manager, you want to use, default is dein.vim
let g:spacevim_plugin_manager = 'dein'  " neobundle or dein or vim-plug

" Set windows shortcut leader [Window], default is `s`
let g:spacevim_windows_leader = 's'

" Set unite work flow shortcut leader [Unite], default is `f`
let g:spacevim_unite_leader = 'F'

" Set Denite work flow shortcut leader [Denite], default is `F`
let g:spacevim_denite_leader = 'f'

" By default, language specific plugins are not loaded. This can be changed
" with the following, then the plugins for go development will be loaded.

" loaded ui layer
call SpaceVim#layers#load('ui')

" Dark powered mode of SpaceVim, generated by SpaceVim automatically.
let g:spacevim_enable_debug = 1
let g:spacevim_realtime_leader_guide = 1
call SpaceVim#layers#load('incsearch')
call SpaceVim#layers#load('lang#c')
call SpaceVim#layers#load('lang#elixir')
call SpaceVim#layers#load('lang#haskell')
call SpaceVim#layers#load('lang#java')
call SpaceVim#layers#load('lang#javascript')
call SpaceVim#layers#load('lang#lua')
call SpaceVim#layers#load('lang#perl')
call SpaceVim#layers#load('lang#php')
call SpaceVim#layers#load('lang#python')
call SpaceVim#layers#load('lang#rust')
call SpaceVim#layers#load('lang#swig')
call SpaceVim#layers#load('lang#tmux')
call SpaceVim#layers#load('lang#vim')
call SpaceVim#layers#load('lang#xml')
call SpaceVim#layers#load('shell')   
"call SpaceVim#layers#load('tools#screensaver')
let g:spacevim_enable_vimfiler_welcome = 1
let g:deoplete#auto_complete_delay = 150
let g:spacevim_enable_tabline_filetype_icon = 1
let g:spacevim_enable_os_fileformat_icon = 1
let g:spacevim_buffer_index_type = 1
"let g:neomake_vim_enabled_makers = ['vimlint', 'vint']
let g:spacevim_filemanager = 'vimfiler'
let g:spacevim_sidebar_width = 30

if has('python3')
    let g:ctrlp_map = ''
    nnoremap <silent> <C-p> :Denite file_rec<CR>
endif
let g:clang2_placeholder_next = ''
let g:clang2_placeholder_prev = ''


" If there is a particular plugin you don't like, you can define this
" variable to disable them entirely:
" let g:spacevim_disabled_plugins=[
"     \ ['Shougo/neobundle.vim'],
"     \ ]

" font setting
if has('win32')
  " 行幅間隔の設定
  set ambiwidth=double
  " Windows用
  set guifont=DejaVu_Sans_Mono_for_Powerline:h11
  " set guifont=Droid_Sans_Mono_Slashed_for_Powerline:h11
  " set guifontwide=MeiryoKe_Console:cSHIFTJIS:w6.7
  set guifontwide=MS_Gothic:cSHIFTJIS

elseif has('mac')
  set guifont=Osaka－等幅:h14
elseif has('xfontset')
  " UNIX用 (xfontsetを使用)
  set guifontset=a14,r14,k14
endif

let g:spacevim_custom_plugins = [
  \ ['vim-jp/vimdoc-ja'],
  \ ['Shougo/neossh.vim'],
  \ ['Shougo/context_filetype.vim'],
  \ ['Shougo/vimshell.vim'],
  \ ['tyru/caw.vim'],
  \ ['kannokanno/previm'],
  \ ['thinca/vim-quickrun'],
  \ ['chrisbra/csv.vim'],
  \ ['vim-airline/vim-airline'],
  \ ['vim-airline/vim-airline-themes'],
  \ ]
let g:airline#extensions#tagbar#enabled = 0

set nocompatible
set packpath=

" reset
augroup MyAutoCmd
    autocmd!
augroup END


let s:is_windows = has('win32') || has('win64')

function! IsWindows() abort
    return s:is_windows
endfunction

function! IsMac() abort
  return !s:is_windows && !has('win32unix')
      \ && (has('mac') || has('macunix') || has('gui_macvim')
      \     || (!executable('xdg-open') && system('uname') =~? '^darwin'))
endfunction

if IsWindows()
    let g:zip_unzipcmd='unzip.exe'
    let g:zip_zipcmd='zip.exe'
    if has('win64')
        let g:default_browser = 'C:/Program Files (x86)/Mozilla Firefox/firefox.exe'
    elseif has('win32')
        let g:default_browser = 'C:/Program Files/Mozilla Firefox/firefox.exe'
    endif
elseif IsMac()
    let g:default_browser = '/Applications/Firefox.app'
else
    let g:default_browser = 'firefox'
    let g:zip_unzipcmd='unzip'
    let g:zip_zipcmd='zip'
endif

if IsWindows()
    let g:python3_host_prog = 'python'
else 
    let g:python3_host_prog = 'python3'
    let g:python2_host_prog = 'python2.6'
endif

let g:unite_source_bookmark_directory = expand($APPDATA . "/bookmark")

filetype plugin indent on

" global setting
if IsWindows()
    set shellslash
endif
" エディタの分割方向を設定する
set splitbelow
set splitright

" windowsライクなバインドに
execute "source " . expand('<sfile>:p:h') . "/rc/winmap.vim"

" 色数の指定 (tmux上でもちゃんとしたカラースキームになるように)
set t_Co=256


"highlight Normal ctermbg=none

" 各種操作をした時に無駄にビープ音がならないように
set t_ut=

set cmdheight=2

" エスケープ後にすぐ入力できるように
set timeout timeoutlen=1000 ttimeoutlen=50
" インサートから抜けたら、IME解除
inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>

set nowritebackup
set nobackup
set noswapfile

" 保存されていないファイルがあるときでも別のファイルを開くことが出来る
set hidden

" 外部でファイルに変更がされた場合は読みなおす
set autoread

" ファイル文末の改行を勝手に変更しない
if exists('+fixeol')
    set nofixendofline
endif

" カーソルLINEを表示しない
"set nocursorline

" 行数の絶対表示
set number
set norelativenumber

" デフォルトで保存するときの文字エンコード
if has('vim_starting') && &encoding !=# 'utf-8'
    if IsWindows() && !has('gui_running')
        set encoding=cp932
    else
        set encoding=utf-8
    endif
endif

function! s:ReCheck_FENC() abort
  let is_multi_byte = search("[^\x01-\x7e]", 'n', 100, 100)
  if &fileencoding =~# 'iso-2022-jp' && !is_multi_byte
    let &fileencoding = &encoding
  endif
endfunction

autocmd MyAutoCmd BufReadPost * call s:ReCheck_FENC()

" Default fileformat.
set fileformat=unix
set fileformats=unix,dos,mac

" Build encodings.
" set fileencodings=utf-8,sjis,cp932,iso-2022-jp,euc-jp

set fileformats=unix,dos,mac

" Command group opening with a specific character code again."{{{
" In particular effective when I am garbled in a terminal.
" Open in UTF-8 again.
command! -bang -bar -complete=file -nargs=? Utf8
      \ edit<bang> ++enc=utf-8 <args>
" Open in iso-2022-jp again.
command! -bang -bar -complete=file -nargs=? Iso2022jp
      \ edit<bang> ++enc=iso-2022-jp <args>
" Open in Shift_JIS again.
command! -bang -bar -complete=file -nargs=? Cp932
      \ edit<bang> ++enc=cp932 <args>
" Open in EUC-jp again.
command! -bang -bar -complete=file -nargs=? Euc
      \ edit<bang> ++enc=euc-jp <args>
" Open in UTF-16 again.
command! -bang -bar -complete=file -nargs=? Utf16
      \ edit<bang> ++enc=ucs-2le <args>
" Open in latin1 again.
command! -bang -bar -complete=file -nargs=? Latin
      \ edit<bang> ++enc=latin1 <args>
"}}}

" Tried to make a file note version.
command! WUtf8 setlocal fenc=utf-8
command! WCp932 setlocal fenc=cp932
command! WLatin1 setlocal fenc=latin1

" Appoint a line feed.
command! -bang -complete=file -nargs=? WUnix
      \ write<bang> ++fileformat=unix <args> | edit <args>
command! -bang -complete=file -nargs=? WDos
      \ write<bang> ++fileformat=dos <args> | edit <args>

if has('multi_byte_ime')
    set iminsert=0 imsearch=0
endif


if has('gui_running')
    source $VIMRUNTIME/delmenu.vim
    set langmenu=ja_jp.utf-8
    source $VIMRUNTIME/menu.vim
endif

" スクロールの高速化
set lazyredraw
set ttyfast

" タブのスペースの数
set tabstop=4
set shiftwidth=4
" タブでスペースを使う
set expandtab
" 自動でインデントの調整smarttabよりこっちがいいらしい
"set smarttab
set cindent
" インデントをshiftwidthの倍数に固定
set shiftround
" コロンでインデントの再調整をしない
set cinkeys-=:

" カッコを入力した時に対応した括弧をハイライトする
set showmatch matchtime=1

" スクロールのオフセットを設定
set sidescrolloff=12
set scrolloff=8
set sidescroll=1

" 検索時設定
set hlsearch
set incsearch
set ignorecase
set smartcase
set wrap
set gdefault

set mouse=a

" backspace and cursor keys wrap to previous/next line
set backspace=indent,eol,start whichwrap+=<,>,[,]
set virtualedit+=block
set laststatus=2
set vb t_vb=
set noerrorbells
set autoread

" True Color用設定
"set termguicolors

" 補完時プレビューウィンドウを表示しない
"set completeopt-=preview
"set completeopt=preview,menu
"set pumheight=10

" qfというファイルタイプの時にバッファに名前をつける
autocmd! FileType qf :file locationlist

" grepした後に自動で検索結果画面を出す
autocmd! QuickfixCmdPost *grep* cwindow

" 検索時に検索したワードが画面中央に来るように
noremap n nzzzv
noremap N Nzzzv


noremap <Space>gs :VimShellBufferDir<CR>

" クリップボード連携
if has('unnamedplus') && !(has('win32') || has('win64'))
    if has('autoselectplus')
        set clipboard=unnamedplus,autoselectplus
    else
        set clipboard=unnamedplus
    endif
else
    set clipboard=unnamed
endif

if has('gui_running')
    set guioptions=gtmre
endif


" View Setting
set number
set cmdheight=2
set laststatus=2
set showtabline=2
set showmatch
set matchtime=1
set list
set listchars=tab:>-,trail:-
if exists('+emo')
    set emoji
endif
set nowrap
set backspace=indent,eol,start
set whichwrap=b,s,h,l,<,>,[,]
set wildmenu

 "-------------------------------------------------------------------------------
 " コマンド       ノーマルモード 挿入モード コマンドラインモード ビジュアルモード
 " map/noremap           @            -              -                  @
 " nmap/nnoremap         @            -              -                  -
 " imap/inoremap         -            @              -                  -
 " cmap/cnoremap         -            -              @                  -
 " vmap/vnoremap         -            -              -                  @
 " map!/noremap!         -            @              @                  -
 "---------------------------------------------------------------------------

set timeoutlen=200
cabbr w!! w !sudo tee > /dev/null %

" 自然な正規表現検索にするため
noremap / /\v

imap <C-;> <Nop>
imap <C-:> <Nop>
imap <C-;> <C-R>=strftime('%Y/%m/%d')<CR>
imap <C-:> <C-R>=strftime('%H:%M')<CR>
imap <C-;:> <C-R>=strftime('%Y/%m/%d %H:%M')<CR>

" シフトで多めに移動
noremap J 20j
noremap K 20k
noremap L 10l
noremap H 10h

" 無効化
"nnoremap ZZ <Nop>
"nnoremap ZQ <Nop>
"nnoremap Q <Nop>

" {{{ http://tamata78.hatenablog.com/entry/2015/10/15/214921
" ウィンドウ分割を楽にする設定
" noremap <A-Left> <C-w>h 
" noremap <A-Down> <C-w>j
" noremap <A-Up> <C-w>k
" noremap <A-Right> <C-w>l
nnoremap <silent><S-A-Left> <C-w>J " 画面自体を左に移動
nnoremap <silent><S-A-Down> <C-w>K " 画面自体を下に移動
nnoremap <silent><S-A-Up> <C-w>L " 画面自体を上に移動
nnoremap <silent><S-A-Right> <C-w>H " 画面自体を右に移動
nnoremap <silent><A-Left>  <C-w><<CR>
nnoremap <silent><A-Right> <C-w>><CR>
nnoremap <silent><A-Up>    <C-w>-<CR>
nnoremap <silent><A-Down>  <C-w>+<CR>


"}}}

"タブ操作
nnoremap t <Nop>
nnoremap <silent> tt :<C-u>tabnew<CR>
nnoremap <silent> tn :<C-u>tabprev<CR>
nnoremap <silent> tx :<C-u>tabclose<CR>
nnoremap <silent> td :<C-u>tabclose<CR>
nnoremap <silent> to :<C-u>tabonly<CR>

" <Esc><Esc>: ハイライトの切り替え
nnoremap <silent> <Esc><Esc> :<C-u>set nohlsearch!<CR>

" jj: エスケープ
imap jj <Esc>

" <Y>: 行末までヤンク
nnoremap Y y$

" 編集を楽にする
imap <silent><C-d> <ESC>yypi
nmap <silent><C-d> m`YP``
vmap <silent><C-d> YPgv

" + と - で数字を変化させる?
" nnoremap + <C-a>
" nnoremap - <C-x>

" QuickRun
noremap <silent> <F5> :QuickRun -outputter error -outputter/error/success buffer -outputter/error quickfix<CR>
noremap!<silent> <F5> <Esc>:QuickRun -outputter error -outputter/error/success buffer -outputter/error quickfix<CR>

" Denite
nmap <silent> <C-F><C-F> :<C-u>Denite file_rec<CR>
nmap <silent> <C-g>  :<C-u>Denite line<CR>
nmap <silent> <C-g><C-g> :<C-u>Denite grep<CR>
nmap <silent> <C-/>:<C-u>DeniteCursorWord grep<CR>
nmap <silent> <C-h> :<C-u>Denite file_mru<CR>
nmap <silent> <C-y><C-y> :<C-u>Denite neoyank<CR>
nmap <silent> <F1>  :<C-u>Denite help<CR>
nmap <silent> <C-h><C-h>  :<C-u>Denite command_history<CR>
nmap <silent> <F9>  :<C-N>Denite -resume -immediately -select=+1<CR>
nmap <silent> <F10> :<C-P>Denite -resume -immediately -select=-1<CR>

" Unite
noremap <silent> <F11> <ESC>:UniteBookmarkAdd<CR>
noremap <silent> <F12> <ESC>:Unite bookmark -buffer-name=bookmark -winheight=20 -start-insert<CR>
noremap! <silent> <F11> <ESC>:UniteBookmarkAdd<CR>
noremap! <silent> <F12> <ESC>:Unite bookmark -buffer-name=bookmark -vertical -winheight=20 -start-insert<CR>
cnoremap <F11> UniteBookmarkAdd<CR>
cnoremap <F12> Unite bookmark -buffer-name=bookmark -vertical -winheight=20 -start-insert<CR>
noremap <C-F12> <ESC>:Unite -buffer-name=outline -vertical -winwidth=50 outline<CR>
noremap! <C-F12> <ESC>:Unite -buffer-name=outline -vertical -winwidth=50 outline<CR>

" vimfiler
nnoremap <silent><S-F2> :VimFilerDouble -reverse -horizontal -direction="bottom" -buffer-name=commander -columns="size:time"<Cr>

vnoremap <silent> > >gv
vnoremap <silent> < <gv

vnoremap <silent> <TAB> >gv
vnoremap <silent> <S-TAB> <gv

