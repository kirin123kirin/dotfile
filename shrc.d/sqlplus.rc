#!/bin/bash -eu
# Oracle Command useful function
# 
# 2019.1

function easyprofile {
  printf "set pages 10000 lines 10000 trims on\ncol username for a30\ncol osuser for a30\ncol program for a30\ncol machine for a30\ncol terminal for a30\n"
}

shopt -s expand_aliases

alias sqldba="sqlplus -S sys/$ORACLE_PWD@$ORACLE_SID as sysdba"

function startdb {
lsnrctl status || lsnrctl start
sqlplus / as sysdba << EOF
  STARTUP;
  exit;
EOF
}

function stopdb {
cat <<EOF | sqldba
  SHUTDOWN IMMEDIATE;
  exit;
EOF
lsnrctl status && lsnrctl stop
}

function abortdb {
   sqlplus / as sysdba <<EOF
   shutdown abort;
   exit;
EOF
   lsnrctl stop
}

alias dblogtail='tail -f $ORACLE_BASE/diag/rdbms/*/*/trace/alert*.log'

function dbcasilent { # $1 dbca.rsp file path
  dbca -silent -createDatabase -responseFile $1 ||
    cat /opt/oracle/cfgtoollogs/dbca/$ORACLE_SID/$ORACLE_SID.log ||
    cat /opt/oracle/cfgtoollogs/dbca/$ORACLE_SID.log
}

function create_listenerora {
  [[ -d $ORACLE_HOME/network/admin ]] || mkdir -p $ORACLE_HOME/network/admin
  echo "LISTENER = 
  (DESCRIPTION_LIST = 
    (DESCRIPTION = 
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1)) 
      (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521)) 
    ) 
  ) 

  DEDICATED_THROUGH_BROKER_LISTENER=ON
  DIAG_ADR_ENABLED = off
  " > $ORACLE_HOME/network/admin/listener.ora
}

function create_tnsnamesora {
  [[ -d $ORACLE_HOME/network/admin ]] || mkdir -p $ORACLE_HOME/network/admin
  echo "$ORACLE_SID=localhost:1521/$ORACLE_SID" > $ORACLE_HOME/network/admin/tnsnames.ora
  echo "$ORACLE_PDB= 
  (DESCRIPTION = 
    (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = $ORACLE_PDB)
    )
  )" >> $ORACLE_HOME/network/admin/tnsnames.ora
}

function create_sqlnetora {
  [[ -d $ORACLE_HOME/network/admin ]] || mkdir -p $ORACLE_HOME/network/admin
  echo "NAME.DIRECTORY_PATH= (TNSNAMES, EZCONNECT, HOSTNAME)" > $ORACLE_HOME/network/admin/sqlnet.ora
}

function alter_pdbautoopen {
sqlplus / as sysdba << EOF
   ALTER SYSTEM SET control_files='$ORACLE_BASE/oradata/$ORACLE_SID/control01.ctl' scope=spfile;
   ALTER SYSTEM SET local_listener='';
   ALTER PLUGGABLE DATABASE $ORACLE_PDB SAVE STATE;
   exit;
EOF
}

function createuser { # $1 username, $2 password
cat <<EOF | sqldba
 
CREATE USER $1
  IDENTIFIED BY "$2"
  DEFAULT TABLESPACE users
  TEMPORARY TABLESPACE temp

EOF
}

function grantdba { # $1 username
cat <<EOF | sqldba

GRANT DBA TO $1 ;
GRANT UNLIMITED TABLESPACE TO $1 ;

EOF
}

function passwd_orauser {
cat <<EOF | sqldba
  PASSWORD $1
EOF
}

function passwd_orasys {
sqlplus / as sysdba << EOF
  ALTER USER SYS IDENTIFIED BY "$ORACLE_PWD";
  ALTER USER SYSTEM IDENTIFIED BY "$ORACLE_PWD";
  ALTER SESSION SET CONTAINER=$ORACLE_PDB;
  ALTER USER PDBADMIN IDENTIFIED BY "$ORACLE_PWD";
  exit;
EOF
}

function chprofile { #$1 username, $2 profile
cat <<EOF | sqldba
  ALTER USER $1 PROFILE $2 ;
EOF
}

function unlockuser { #$1 username
cat <<EOF | sqldba
  ALTER USER $1 ACCOUNT UNLOCK ;
EOF
}

function dropuser { #$1 username
cat <<EOF | sqldba
  DROP USER $1;
EOF
}

function dropuser_and_data { #$1 username
cat <<EOF | sqldba
  DROP USER $1 CASCADE;
EOF
}

function lsusers {
cat <<EOF | sqldba
  SELECT * FROM all_users;
EOF
}

function tablespaces {
cat <<EOF | sqldba
  SELECT * FROM dba_ts_quotas;
EOF
}

function purgetable { #$1 tablename
cat <<EOF | sqldba
  TRUNCATE $1 DROP storage;
EOF
}

alias lssid='grep -v "^$" /etc/oratab | grep -v "^\s*#"'

function lsroles {
cat <<EOF | sqldba
  SELECT * FROM DBA_ROLES;
EOF
}

function lsdba {
cat <<EOF | sqldba
select
  profile,
  resource_name,
  resource_type,
  limit
from
  dba_profiles
where
  profile = 'DEFAULT'
order by
  resource_type, resource_name;
EOF
}

function cptable { #$1 srctbl, $2 desttbl
cat <<EOF | sqldba
  CREATE TABLE $2 AS SELECT * FROM $1;
EOF
}

function mvtable { #$1 srctbl, $2 desttbl
cat <<EOF | sqldba
  RENAME $1 TO $2
EOF
}

function consttable { #$1 tbl
cat <<EOF | sqldba

select
  user_constraints.*
 ,user_cons_columns.*
  from
  user_constraints
 ,user_cons_columns
 where
     user_constraints.table_name      = user_cons_columns.table_name(+)
 and user_constraints.constraint_name = user_cons_columns.constraint_name(+)
 and user_constraints.table_name      = \'$1\'

EOF
}
